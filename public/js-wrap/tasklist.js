function createCategory(categoryId, categoryName) {
    const categoryContainer = document.createElement('section');
    categoryContainer.className = 'taskcat';
    categoryContainer.id = `taskcat-${categoryId}`;

    const categoryWrapper = document.createElement('div');
    categoryWrapper.className = 'taskcat-wrapper';

    const categoryHeader = document.createElement('div');
    categoryHeader.className = 'taskcat-header';

    const categoryTitle = document.createElement('h3');
    categoryTitle.className = 'taskcat-header__title text-clip';
    categoryTitle.innerText = categoryName;
    const categoryContent = document.createElement('div');
    categoryContent.className = 'taskcat-content';

    categoryHeader.appendChild(categoryTitle);
    categoryWrapper.appendChild(categoryHeader);
    categoryWrapper.appendChild(categoryContent);

    categoryContainer.appendChild(categoryWrapper);

    tasklist.appendChild(categoryContainer);
}



// –§–£–ù–ö–¶–ò–ò –ù–ò–ñ–ï –¢–†–ï–ë–£–Æ–¢ –ü–†–ò–í–ò–õ–ï–ì–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function updateTasklist() {
    const token = getToken();
    const tasklist = document.querySelector('#tasklist');
    
    if (currentBoard === null) {
        document.querySelector('#tasklist').innerHTML = '<h1 class="tasklist-placeholder">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.</h1>';
        return;
    }

    fetch(`../api/board${currentBoard}/submits`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(submitsData => {
        fetch(`../api/board${currentBoard}/tasks`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(tasksData => {
            tasklist.innerHTML = '';
            
            if (tasksData.length > 0) {
                for (const taskData of tasksData) {
                    const submitData = submitsData.filter(submitData => submitData.task_id === taskData.id)[0] || {};

                    createTasklistTask(taskData, submitData);
                }
            }
            else {
                tasklist.innerHTML = '<h2 class="tasklist-placeholder">–ü–æ—Ö–æ–∂–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ–π –¥–æ—Å–∫–∏ –ø–æ–∫–∞<br>–Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏‚Ä¶ –ø–∏—á–∞–ª—å.</h2>';
            }

            if (showActionsForOperator) {
                document.querySelector('#groupinfo-actions').classList.remove('hidden');
                document.querySelector('#boardman-actions__edit-btn').disabled = false;
                document.querySelector('#boardman-actions__delete-btn').disabled = false;
            }
        })
        .catch(error => console.error(error));
    })
}

function createTasklistTask(taskData, submitData) {
    const token = getToken();
    //console.log(taskData, submitData);
    
    // –°–ø–µ—Ä–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏, –∏—Å—Ö–æ–¥—è –∏–∑
    // —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏ –≤ submitData (–µ—Å–ª–∏ –µ—Å—Ç—å)...
    let categoryId = 'unknown', categoryName = '‚ÅâÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (!submitData.status || submitData.status === undefined) {
        categoryId = 'to-do';
        categoryName = '‚öíÔ∏è –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é';
    }
    else {
        if (submitData.status === 'pending') {
            categoryId = 'pending';
            categoryName = 'üêù –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏‚Ä¶';
        }
        else if (submitData.status === 'accepted') {
            categoryId = 'accepted';
            categoryName = 'üèÜ –ü–†–ò–ù–Ø–¢–û!';
        }
        else if (submitData.status === 'rejected') {
            categoryId = 'rejected';
            categoryName = 'üóø –û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        }
    }

    // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
    // —ç–ª–µ–º–µ–Ω—Ç –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω—É –∞ **–ª–∏, –Ω–∞ —á–∏—Å—Ç–æ–º JS–µ –∂–µ –ø–∏—à–µ–º)...
    let category = document.querySelector(`#taskcat-${categoryId}`);
    if (!category) {
        createCategory(categoryId, categoryName);
        category = document.querySelector(`#taskcat-${categoryId}`);
    }

    const taskContainer = document.createElement('article');
    taskContainer.className = 'task';

    const taskContent = document.createElement('div');
    taskContent.className = 'task-content';

    const taskTitle = document.createElement('h3');
    taskTitle.className = 'task-content__title text-clip';
    taskTitle.innerText = taskData.title;
    taskContent.appendChild(taskTitle);

    const taskText = document.createElement('p');
    taskText.className = 'task-content__text text-clip';
    taskText.innerText = taskData.body;
    taskContent.appendChild(taskText);

    const taskDue = document.createElement('i');
    taskDue.className = 'task-content__due';

    if (taskData.date_due !== null) {
    const taskDueDate = ISOtoDDMMYY(taskData.date_due);
        taskDue.innerText = `–°—Ä–æ–∫ —Å–¥–∞—á–∏: –î–û ${taskDueDate}`;

        if (checkIfOutdated(taskData.date_due)) {
            taskDue.classList.add('task-outdated');
        }
    }
    taskContent.appendChild(taskDue);

    taskContent.onclick = () => {
        taskmanGetInfo(taskData.id, submitData.status);
        openTaskmanView();
    }

    taskContainer.appendChild(taskContent);

    // –ù–∞–∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º,
    // –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π.
    if (showActionsForOperator) {
        const taskActions = document.createElement('div');
        taskActions.className = 'task-actions';

        const taskActionsEdit = document.createElement('button');
        taskActionsEdit.className = 'task-actions__edit';
        taskActionsEdit.innerText = '–ò–∑–º–µ–Ω–∏—Ç—å';
        taskActionsEdit.onclick = () => tasklistEditTask(taskData.id);

        const taskActionsDelete = document.createElement('button');
        taskActionsDelete.className = 'task-actions__delete';
        taskActionsDelete.innerText = '–£–¥–∞–ª–∏—Ç—å';
        taskActionsDelete.onclick = () => tasklistDeleteTask(taskData.id);

        const taskActionsSubmits = document.createElement('button');
        taskActionsSubmits.className = 'task-actions__submits';
        taskActionsSubmits.innerText = '–ü–æ—Å—ã–ª–∫–∏';
        taskActionsSubmits.onclick = () => tasklistSubmitsPanel(taskData.id);

        taskActions.appendChild(taskActionsEdit);
        taskActions.appendChild(taskActionsDelete);
        taskActions.appendChild(taskActionsSubmits);
        taskContainer.appendChild(taskActions);
    }

    category.querySelector('.taskcat-content').appendChild(taskContainer);
}



// –§–£–ù–ö–¶–ò–ò –ù–ò–ñ–ï –¢–†–ï–ë–£–Æ–¢ –ü–†–ò–í–ò–õ–ï–ì–ò–ô –û–ü–ï–†–ê–¢–û–†–ê
function tasklistNewTask() {
    const token = getToken();

    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:');
    const body = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:');
    const dateDue = DDMMYYtoISO(prompt('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì, –ù–ï –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ; –ø—Ä–æ–ø—É—Å–∫ ‚Äî –±–µ–∑ —Å—Ä–æ–∫–∞):'));
    //console.log(dateDue);

    fetch(`../api/board${currentBoard}/tasks`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
			title: title,
			body: body,
			dateDue: dateDue
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.message !== undefined) { alert(data.message); }

        updateTasklist();
    })
    .catch(error => console.error(error));
}

function tasklistEditTask(taskId) {
    const token = getToken();

    const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:');
    const body = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:');
    const dateDue = DDMMYYtoISO(prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –∑–∞–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì, –ù–ï –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ; –ø—Ä–æ–ø—É—Å–∫ ‚Äî –±–µ–∑ —Å—Ä–æ–∫–∞):'));
    //console.log(dateDue);

    fetch(`../api/board${currentBoard}/task${taskId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
			title: title,
			body: body,
			dateDue: dateDue
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.message !== undefined) { alert(data.message); }

        updateTasklist();
    })
    .catch(error => console.error(error));
}

function tasklistDeleteTask(taskId) {
    const token = getToken();

    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?")) {
        fetch(`../api/board${currentBoard}/task${taskId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.message !== undefined) { alert(data.message); }

            updateTasklist();
        })
        .catch(error => console.error(error));
    }
}

function tasklistSubmitsPanel(taskId) {
    const token = getToken();

    fetch(`../api/board${currentBoard}/task${taskId}/submits`, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
        })
        .then(response => response.json())
    
        .then(data => {
            if (data.length > 0) {
                const selectedSubmit = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${data.toString()}`);

                fetch(`../api/board${currentBoard}/task${taskId}/submit${selectedSubmit}`, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.message) { alert(data.message); }

                    let newSubmitStatus = prompt('–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏: ' + data.status
                    + '\n\n–¢–µ–∫—Å—Ç –ø–æ—Å—ã–ª–∫–∏: ' + data.text
                    + '\n\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ' + ISOtoDDMMYY(data.date_submitted)
                    + '\n\n–ü–†–ò–ù–Ø–¢–¨ ‚Äî "a", –û–¢–ö–õ–û–ù–ò–¢–¨ ‚Äî "r", –ù–ï –ú–ï–ù–Ø–¢–¨ ‚Äî (–ø—Ä–æ–ø—É—Å–∫):');

                    if (newSubmitStatus !== 'a' && newSubmitStatus !== 'r') { return; }
                    else if (newSubmitStatus === 'a') { newSubmitStatus = 'accepted'; }
                    else if (newSubmitStatus === 'r') { newSubmitStatus = 'rejected'; }

                    fetch(`../api/board${currentBoard}/task${taskId}/submit${selectedSubmit}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            status: newSubmitStatus
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message) { alert(data.message); }

                        alert(`–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${newSubmitStatus}"!`);
                    })
                    .catch(error => console.error(error));
                })
                .catch(error => console.error(error));
            }
            else {
                alert('–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.');
            }
        })
        .catch(error => alert(error.message));
}
