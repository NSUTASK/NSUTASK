
function showFileName(file_name) {
    const fileNameDisplay = document.getElementById('fileName');

    if (file_name.length > 0) {
        fileNameDisplay.textContent = file_name;
    } else {
        // fileNameDisplay.textContent = "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω";

        const fileInput = document.getElementById('fileInput');

        if (fileInput.files.length > 0) {
            fileNameDisplay.textContent = fileInput.files[0].name;
        } 
        else 
        {
            fileNameDisplay.textContent = "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω";
        }
    }
}



////////////////////////////////////////////////////////////////////

function createCategory(categoryId, categoryName) {
    const categoryContainer = document.createElement('section');
    categoryContainer.className = 'taskcat';
    categoryContainer.id = `taskcat-${categoryId}`;

    const categoryWrapper = document.createElement('div');
    categoryWrapper.className = 'taskcat-wrapper';

    const categoryHeader = document.createElement('div');
    categoryHeader.className = 'taskcat-header';

    const categoryTitle = document.createElement('h3');
    categoryTitle.className = 'taskcat-header__title text-clip';
    categoryTitle.innerText = categoryName;
    const categoryContent = document.createElement('div');
    categoryContent.className = 'taskcat-content';

    categoryHeader.appendChild(categoryTitle);
    categoryWrapper.appendChild(categoryHeader);
    categoryWrapper.appendChild(categoryContent);

    categoryContainer.appendChild(categoryWrapper);

    tasklist.appendChild(categoryContainer);
}



// –§–£–ù–ö–¶–ò–ò –ù–ò–ñ–ï –¢–†–ï–ë–£–Æ–¢ –ü–†–ò–í–ò–õ–ï–ì–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function updateTasklist() {
    const token = getToken();
    const tasklist = document.querySelector('#tasklist');

    fetch(`../api/board${currentBoard}/submits`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(submitsData => {
        fetch(`../api/board${currentBoard}/tasks`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(tasksData => {
            if (tasksData.message !== undefined) {
                document.querySelector('#tasklist').innerHTML = '<h1 class="tasklist-placeholder">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.</h1>';
                // –°–ø–∞—Å–∏–±–æ –∫—ç—à—É —Ñ–∞–π—Ä—Ñ–æ–∫—Å–∞ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–µ–±–∞–≥–∞
                document.querySelector('#boardman-actions__edit-btn').disabled = true;
                document.querySelector('#boardman-actions__delete-btn').disabled = true;
                clearLastBoard();
                return;
            }

            tasklist.innerHTML = '';

            if (tasksData.length > 0) {
                for (const taskData of tasksData) {
                    const submitData = submitsData.filter(submitData => submitData.task_id === taskData.id)[0] || {};

                    createTasklistTask(taskData, submitData);
                }
            }
            else {
                tasklist.innerHTML = '<h2 class="tasklist-placeholder">–ü–æ—Ö–æ–∂–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ–π –¥–æ—Å–∫–∏ –ø–æ–∫–∞<br>–Ω–µ —Å–æ–∑–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏‚Ä¶ –ø–∏—á–∞–ª—å.</h2>';
            }

            if (showActionsForOperator) {
                document.querySelector('#groupinfo-actions').classList.remove('hidden');
                document.querySelector('#boardman-actions__edit-btn').disabled = false;
                document.querySelector('#boardman-actions__delete-btn').disabled = false;
            }
        })
        .catch(error => console.error(error));
    })
}

function createTasklistTask(taskData, submitData) {
    const token = getToken();
    //console.log(taskData, submitData);

    // –°–ø–µ—Ä–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏, –∏—Å—Ö–æ–¥—è –∏–∑
    // —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏ –≤ submitData (–µ—Å–ª–∏ –µ—Å—Ç—å)...
    let categoryId = 'unknown', categoryName = '‚ÅâÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (!submitData.status || submitData.status === undefined) {
        categoryId = 'to-do';
        categoryName = '‚öíÔ∏è –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é';
    }
    else {
        categoryId = submitData.status;

        switch (submitData.status) {
            case 'pending':
                categoryName = 'üêù –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏‚Ä¶';
                break;
            case 'accepted':
                categoryName = 'üèÜ –ü–†–ò–ù–Ø–¢–û!';
                break;
            case 'rejected':
                categoryName = 'üóø –û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
                break;
            default:
                categoryId = 'unknown';
                categoryName = '‚ÅâÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                break;
        }
    }

    // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
    // —ç–ª–µ–º–µ–Ω—Ç –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω—É –∞ **–ª–∏, –Ω–∞ —á–∏—Å—Ç–æ–º JS–µ –∂–µ –ø–∏—à–µ–º)...
    let category = document.querySelector(`#taskcat-${categoryId}`);
    if (!category) {
        createCategory(categoryId, categoryName);
        category = document.querySelector(`#taskcat-${categoryId}`);
    }

    const taskContainer = document.createElement('article');
    taskContainer.className = 'task';

    const taskContent = document.createElement('div');
    taskContent.className = 'task-content';

    const taskTitle = document.createElement('h3');
    taskTitle.className = 'task-content__title text-clip';
    taskTitle.innerText = taskData.title;
    taskContent.appendChild(taskTitle);

    const taskText = document.createElement('p');
    taskText.className = 'task-content__text text-clip';
    taskText.innerText = taskData.body;
    taskContent.appendChild(taskText);

    const taskDue = document.createElement('i');
    taskDue.className = 'task-content__due';

    if (taskData.date_due !== null) {
    const taskDueDate = ISOtoDDMMYY(taskData.date_due);
        taskDue.innerText = `–°—Ä–æ–∫ —Å–¥–∞—á–∏: –î–û ${taskDueDate}`;

        if (checkIfOutdated(taskData.date_due)) {
            taskDue.classList.add('task-outdated');
        }
    }
    taskContent.appendChild(taskDue);

    taskContent.onclick = () => {
        taskmanGetInfo(taskData.id, submitData.status);
        openTaskmanView();
    }

    taskContainer.appendChild(taskContent);

    // –ù–∞–∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º,
    // –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π.
    if (showActionsForOperator) {
        const taskActions = document.createElement('div');
        taskActions.className = 'task-actions';

        const taskActionsEdit = document.createElement('button');
        taskActionsEdit.className = 'task-actions__edit';
        taskActionsEdit.innerText = '–ò–∑–º–µ–Ω–∏—Ç—å';
        taskActionsEdit.onclick = () => tasklistEditTask(taskData.id);

        const taskActionsDelete = document.createElement('button');
        taskActionsDelete.className = 'task-actions__delete';
        taskActionsDelete.innerText = '–£–¥–∞–ª–∏—Ç—å';
        taskActionsDelete.onclick = () => tasklistDeleteTask(taskData.id);

        const taskActionsSubmits = document.createElement('button');
        taskActionsSubmits.className = 'task-actions__submits';
        taskActionsSubmits.innerText = `–ü–æ—Å—ã–ª–æ–∫: ${taskData.submits_count}`;
        taskActionsSubmits.onclick = () => tasklistSubmitsPanel(taskData.id);

        taskActions.appendChild(taskActionsEdit);
        taskActions.appendChild(taskActionsDelete);
        taskActions.appendChild(taskActionsSubmits);
        taskContainer.appendChild(taskActions);
    }

    category.querySelector('.taskcat-content').appendChild(taskContainer);
}



// –§–£–ù–ö–¶–ò–ò –ù–ò–ñ–ï –¢–†–ï–ë–£–Æ–¢ –ü–†–ò–í–ò–õ–ï–ì–ò–ô –û–ü–ï–†–ê–¢–û–†–ê
function tasklistNewTask() {
    const token = getToken();

    const formData = [
        { name: '<h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</h2>', type: 'custom' },
        { name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏', type: 'text', allowEmpty: false },
        { name: '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏', type: 'textarea', allowEmpty: true },
        { name: '–°—Ä–æ–∫ —Å–¥–∞—á–∏ (–ù–ï –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)', type: 'date', allowEmpty: true },
        { name: '<i>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ—Å—Å—Ä–æ—á–Ω–æ–π.</i>', type: 'custom' },
    ];

    showFileName('');

    modalmanForm(formData, true)
    .then(formResults => {
        if (!formResults) { return; }

        console.log('–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ —Ñ–∞–π–ª–∞ -> ', formResults[3]);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FormData
        const formData = new FormData();
        formData.append('title', formResults[0]);
        formData.append('body', formResults[1]);
        formData.append('dateDue', formResults[2] || null);

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ fileInput
        const fileInput = document.getElementById('fileInput');
        if (fileInput.files.length > 0) {
            formData.append('file', fileInput.files[0]); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData
        }

        fetch(`../api/board${currentBoard}/tasks`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}` // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            },
            body: formData // –ü–µ—Ä–µ–¥–∞–µ–º FormData
        })
        .then(response => response.json())
        .then(data => {
            if (data.message !== undefined) { alert(data.message); }

            updateTasklist();
        })
        .catch(error => console.error(error));
    });
}


function tasklistEditTask(taskId) {
    const token = getToken();

    fetch(`../api/board${currentBoard}/task${taskId}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);
        
        // document.getElementById('fileName').value = data.file_name;
        const formData = [
            { name: '<h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</h2>', type: 'custom' },
            { name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏', type: 'text', allowEmpty: false, defaultValue: data.title },
            { name: '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏', type: 'textarea', allowEmpty: true, defaultValue: data.body },
            { name: '–°—Ä–æ–∫ —Å–¥–∞—á–∏ (–ù–ï –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)', type: 'date', allowEmpty: true, defaultValue: data.date_due },
            { name: '<i>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ—Å—Å—Ä–æ—á–Ω–æ–π.</i>', type: 'custom' },
        ];

        showFileName(data.file_name);

        modalmanForm(formData, true)
        .then(formResults => {
            if (!formResults) { return; }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            const formData = new FormData();
            formData.append('title', formResults[0]);
            formData.append('body', formResults[1]);
            formData.append('dateDue', formResults[2] || null);

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ fileInput
            const fileInput = document.getElementById('fileInput');
            if (fileInput && fileInput.files.length > 0) {
                formData.append('file', fileInput.files[0]); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            fetch(`../api/board${currentBoard}/task${taskId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}` // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                },
                body: formData // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FormData
            })
            .then(response => response.json())
            .then(data => {
                if (data.message !== undefined) {
                    alert(data.message);
                }
                updateTasklist();
            })
            .catch(error => console.error(error));
        });
    });
}


function tasklistDeleteTask(taskId) {
    const token = getToken();

    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?")) {
        fetch(`../api/board${currentBoard}/task${taskId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.message !== undefined) { alert(data.message); }

            updateTasklist();
        })
        .catch(error => console.error(error));
    }
}

function tasklistSubmitsPanel(taskId) {
    const token = getToken();

    fetch(`../api/board${currentBoard}/task${taskId}/submits`, {
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
    })
    .then(response => response.json())
    .then(data => {
        if (data.length > 0) {
            const formData = [
                { name: '<h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∞–º–∏ –∑–∞–¥–∞—á–∏</h2>', type: 'custom' },
                ...data.map(submit => ({
                    name: `–ü–æ—Å—ã–ª–∫–∞ ${submit}`,
                    type: 'radio',
                    allowEmpty: false
                }))
            ];

            modalmanForm(formData, false).then(formResults => {
                if (!formResults) return;

                const selectedSubmitIndex = formResults.findIndex(value => value === true);
                if (selectedSubmitIndex === -1) { return };

                fetch(`../api/board${currentBoard}/task${taskId}/submit${data[selectedSubmitIndex]}`, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                })
                .then(response => response.json())
                .then(submitData => {
                    if (submitData.message) {
                        alert(submitData.message);
                        return;
                    }
                    //console.log(submitData);

                    const statusFormData = [
                        { name: `<h2>–ü–æ—Å—ã–ª–∫–∞ –æ—Ç ${submitData.display_name} (${submitData.username})`, type: 'custom' },
                        { name: `<i>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${ISOtoDDMMYY(submitData.date_submitted)}</i>`, type: 'custom' },
                        { name: `<pre>${submitData.text}</pre>`, type: 'custom' },
                        { name: '<br><i>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏:</i>', type: 'custom' },
                        { name: 'üèÜ –ü–†–ò–ù–Ø–¢–û!', type: 'radio', defaultValue: (submitData.status === 'accepted'), allowEmpty: false },
                        { name: 'üóø –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', type: 'radio', defaultValue: (submitData.status === 'rejected'), allowEmpty: false },
                        { name: 'üêù –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏‚Ä¶', type: 'radio', defaultValue: (submitData.status === 'pending'), allowEmpty: false }
                    ];

                    modalmanForm(statusFormData, false).then(statusFormResults => {
                        if (!statusFormResults) { return };

                        const selectedStatusIndex = statusFormResults.findIndex(value => value === true);
                        if (selectedStatusIndex === -1) { return };

                        let newSubmitStatus = null;
                        if (selectedStatusIndex === 0) {
                            newSubmitStatus = 'accepted';
                        }
                        else if (selectedStatusIndex === 1) {
                            newSubmitStatus = 'rejected';
                        }
                        else {
                            newSubmitStatus = 'pending';
                        }

                        fetch(`../api/board${currentBoard}/task${taskId}/submit${data[selectedSubmitIndex]}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${token}`
                            },
                            body: JSON.stringify({
                                status: newSubmitStatus
                            })
                        })
                        .then(response => response.json())
                        .then(updateData => {
                            if (updateData.message) {
                                alert(updateData.message);
                            } else {
                                tasklistSubmitsPanel(taskId);
                            }
                        })
                        .catch(error => console.error(error));
                    });
                })
                .catch(error => console.error(error));
            });
        } else {
            alert('–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.');
        }
    })
    .catch(error => alert(error.message));
}
